syntax on " Highlight syntax
filetype plugin on "enable plugins for net rw
set nocompatible "disable VI support
command! MakeTags !ctags -R .

set number " show number of lines
set mouse=a "enable mouse support
set cursorline

let g:netrw_banner=0 "disable annoying banner"
let g:netrw_browse_split=4 "open in prior window"
let g:netrw_altv=1 "open splits to the right"
let g:netrw_liststype=3 "tree view"

cnoreabbrev f find

set hidden           " Hides the current buffer when a new file is opened
set incsearch        " Incremental search
set ignorecase       " Ignore case in search
set smartcase        " Consider case if there is a upper case character
set scrolloff=8      " Minimum number of lines to keep above and below the cursor
set colorcolumn=100  " Draws a line at the given line to keep aware of the line size
set signcolumn=yes   " Add a column on the left. Useful for linting
set cmdheight=2      " Give more space for displaying messages
set updatetime=100   " Time in milisseconds to consider the changes
set encoding=utf-8   " utf-8 to activate the font icons
set nobackup         " No backup files
set nowritebackup    " No backup files
set splitright       " Create the vertical splits to the right
set splitbelow       " Create the horizontal splits below
set autoread         " Update vim after file update from outside
filetype on          " Detect and set the filetype option and trigger the filetype event
filetype plugin on   " Load the plugin file for the file type, if any
filetype indent on   " Load the indent file for the file type, if any

set clipboard=unnamed " Sync clipboard

set tabstop=2 " Show existing tab with 2 spaces width
set softtabstop=2 " Show existing tab with 2 spaces width
set shiftwidth=2  " When indenting with '>', use 4 spaces width
set expandtab "pressing tab inserts spaces
set shortmess=a
set smarttab         " insert tabs on the start of a line according to shiftwidth
set smartindent      " Automatically inserts one extra level of indentation in some cases

" File Find {{{
 set path+=**
 set wildmenu
 set wildignore+=**/node_modules/**
 set hidden
" }}}

"  nir9 user vimrc -----------
filetype plugin indent on
set tabstop=4
set shiftwidth=4

set wildmenu
set hidden

set spell

set is

set ignorecase
set smartcase

set gp=git\ grep\ -n
set ruler
set wildignore=*.exe,*.dll,*.pdb

set guifont=Lucida_Console:h25

set guioptions-=m
set guioptions-=T
set guioptions-=r

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gi <plug>(lsp-definition)
    nmap <buffer> gd <plug>(lsp-declaration)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gl <plug>(lsp-document-diagnostics)
    nmap <buffer> <f2> <plug>(lsp-rename)
    nmap <buffer> <f3> <plug>(lsp-hover)
endfunction

augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

packadd! matchit

"  nir9 user vimrc -----------end

" Plugins
call plug#begin()

"  nir9 user vimrc -----------begin
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
"  nir9 user vimrc -----------end

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'preservim/nerdtree'
Plug 'rust-lang/rust.vim'
Plug 'vim-autoformat/vim-autoformat'
Plug 'sbdchd/neoformat'
Plug 'tpope/vim-commentary'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'Xuyuanp/nerdtree-git-plugin'

" useful info bar on bottom
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'ryanoasis/vim-devicons' "devicons

Plug 'sheerun/vim-polyglot' " language syntax highlighting

Plug 'honza/vim-snippets' " coc snippets

Plug 'jiangmiao/auto-pairs' " pairs characters

if (has("nvim"))
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'
endif

call plug#end()

" remap syncs pasteboard
noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>Y "+y
noremap <Leader>P "+p

" AirLine

"""""""""""""""""""""""""" Mappings
nmap <C-o> :NERDTreeToggle <CR>
nmap <C-i> :Autoformat <CR>

" Create a tab
nmap te :tabe<CR>

" Navigate between buffers
nmap ty :bn<CR>
nmap tr :bp<CR>
"
" Delete a buffer
nmap td :bd<CR>

" Create splits
nmap th :split<CR>
nmap tv :vsplit<CR>

" Close splits and others
nmap tt :q<CR>
"
" Call command shortcut -> tc already types :!
nmap tc :!


"Autocommands
function! HighlightWordUnderCursor()
  if getline(".")[col(".")-1] !~# '[[:punct:][:blank:]]'
    exec 'match' 'Search' '/\V\<'.expand('<cword>').'\>/'
  else
    match none
  endif
endfunction


" Coc config
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

if has("patch-8.1.1564")
  set signcolumn=number
else
  set signcolumn=no
endif
